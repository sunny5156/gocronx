{"remainingRequest":"/root/go/src/github.com/sunny5156/gocronx/web/new-theme/node_modules/thread-loader/dist/cjs.js!/root/go/src/github.com/sunny5156/gocronx/web/new-theme/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/root/go/src/github.com/sunny5156/gocronx/web/new-theme/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/root/go/src/github.com/sunny5156/gocronx/web/new-theme/src/utils/request.js","dependencies":[{"path":"/root/go/src/github.com/sunny5156/gocronx/web/new-theme/src/utils/request.js","mtime":1602313918000},{"path":"/root/go/src/github.com/sunny5156/gocronx/web/new-theme/node_modules/cache-loader/dist/cjs.js","mtime":1600257155902},{"path":"/root/go/src/github.com/sunny5156/gocronx/web/new-theme/node_modules/thread-loader/dist/cjs.js","mtime":1600257158773},{"path":"/root/go/src/github.com/sunny5156/gocronx/web/new-theme/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1600257116664},{"path":"/root/go/src/github.com/sunny5156/gocronx/web/new-theme/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1600257145698}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/root/go/src/github.com/sunny5156/gocronx/web/new-theme/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { MessageBox, Message } from 'element-ui';\nimport store from '@/store';\nimport { getToken, getBaseApi } from '@/utils/auth';\nimport qs from 'qs'; // create an axios instance\n\nvar BASE_API = process.env.VUE_APP_BASE_API;\nvar service = axios.create({\n  baseURL: BASE_API,\n  // url = base url + request url\n  // withCredentials: true, // send cookies when cross-domain requests\n  timeout: 600000 // request timeout\n\n}); // request拦截器\n\nservice.interceptors.request.use( /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(config) {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(!service.defaults.baseURL || service.defaults.baseURL === 'undefined' || process.env.NODE_ENV === 'production' && location.pathname === '/login')) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 3;\n            return getBaseApi();\n\n          case 3:\n            service.defaults.baseURL = localStorage.getItem('BASE_API');\n            config.baseURL = localStorage.getItem('BASE_API');\n\n          case 5:\n            // do something before request is sent\n            config.headers['Content-Type'] = config.data && config.data.isJson ? 'application/json' : 'application/x-www-form-urlencoded';\n            config['show_message'] = !(config.data && config.data.not_show_message);\n\n            if (config.method === 'post') {\n              // post请求时，处理数据\n              if (!(config.data && config.data.isJson)) {\n                config.data = qs.stringify(config.data);\n              }\n            }\n\n            if (store.getters.token) {\n              config.headers['Auth-Token'] = getToken(); // 让每个请求携带自定义token 请根据实际情况自行修改\n            }\n\n            return _context.abrupt(\"return\", config);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}(), function (error) {\n  // Do something with request error\n  console.log(error); // for debug\n\n  Promise.reject(error);\n}); // respone拦截器\n\nservice.interceptors.response.use(function (response) {\n  /**\r\n   * code为非200是抛错 可结合自己业务进行修改\r\n   */\n  var res = response.data;\n\n  if (res.code && res.code !== 200) {\n    // 401 token失效或者过期\n    if (res.code === 401) {\n      MessageBox.confirm(res.message, '提示', {\n        type: 'warning',\n        showCancelButton: false,\n        confirmButtonText: '确定'\n      }).finally(function () {\n        store.dispatch('user/FedLogOut').then(function () {\n          location.reload(); // 为了重新实例化vue-router对象 避免bug\n        });\n      });\n    } else {\n      if (res.message && response.config.show_message) {\n        Message({\n          dangerouslyUseHTMLString: true,\n          message: res.message,\n          type: 'error',\n          duration: 5 * 1000\n        });\n      }\n    }\n\n    return Promise.reject(res.message);\n  } else {\n    if (response.config.method === 'post') {\n      // 屏蔽message\n      if (response.config.show_message) {\n        Message({\n          message: response.data.message,\n          type: 'success',\n          duration: 5 * 1000\n        });\n      }\n    }\n\n    return response.data;\n  }\n}, function (error) {\n  console.log('err' + error);\n\n  if (error.message) {\n    Message({\n      message: error.message,\n      type: 'error',\n      duration: 5 * 1000\n    });\n  }\n\n  return Promise.reject(error);\n});\nexport default service;",null]}