{"remainingRequest":"/root/go/src/github.com/sunny5156/gocronx/web/new-theme/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/root/go/src/github.com/sunny5156/gocronx/web/new-theme/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/root/go/src/github.com/sunny5156/gocronx/web/new-theme/src/utils/index.js","dependencies":[{"path":"/root/go/src/github.com/sunny5156/gocronx/web/new-theme/src/utils/index.js","mtime":1602314092000},{"path":"/root/go/src/github.com/sunny5156/gocronx/web/new-theme/node_modules/cache-loader/dist/cjs.js","mtime":1600257155902},{"path":"/root/go/src/github.com/sunny5156/gocronx/web/new-theme/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1600257116664},{"path":"/root/go/src/github.com/sunny5156/gocronx/web/new-theme/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1600257145698}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/root/go/src/github.com/sunny5156/gocronx/web/new-theme/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseTime = parseTime;\nexports.formatTime = formatTime;\nexports.param2Obj = param2Obj;\nexports.fattCreateTime = fattCreateTime;\nexports.addClass = addClass;\nexports.removeClass = removeClass;\nexports.getArrayIdList = getArrayIdList;\nexports.getSevenDayArray = getSevenDayArray;\nexports.debounce = debounce;\nexports.replaceBlank = replaceBlank;\nexports.fromatNum = fromatNum;\nexports.resultAlert = resultAlert;\nexports.toBoolean = exports.transformToOptions = exports.transformTreeToList = exports.filterQueryParams = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.string.iterator\");\n\nrequire(\"core-js/modules/es6.array.from\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nvar _typeof2 = _interopRequireDefault(require(\"/root/go/src/github.com/sunny5156/gocronx/web/new-theme/node_modules/@babel/runtime-corejs2/helpers/typeof\"));\n\nvar _vue = _interopRequireDefault(require(\"vue\"));\n\nvar _elementUi = require(\"element-ui\");\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * Parse the time to string\n * @param {(Object|string|number)} time\n * @param {string} cFormat\n * @returns {string}\n */\nfunction parseTime(time, cFormat) {\n  if (arguments.length === 0) {\n    return null;\n  }\n\n  var format = cFormat || '{y}-{m}-{d} {h}:{i}:{s}';\n  var date;\n\n  if ((0, _typeof2.default)(time) === 'object') {\n    date = time;\n  } else {\n    if (typeof time === 'string' && /^[0-9]+$/.test(time)) {\n      time = parseInt(time);\n    }\n\n    if (typeof time === 'number' && time.toString().length === 10) {\n      time = time * 1000;\n    }\n\n    date = new Date(time);\n  }\n\n  var formatObj = {\n    y: date.getFullYear(),\n    m: date.getMonth() + 1,\n    d: date.getDate(),\n    h: date.getHours(),\n    i: date.getMinutes(),\n    s: date.getSeconds(),\n    a: date.getDay()\n  };\n  var time_str = format.replace(/{(y|m|d|h|i|s|a)+}/g, function (result, key) {\n    var value = formatObj[key]; // Note: getDay() returns 0 on Sunday\n\n    if (key === 'a') {\n      return ['日', '一', '二', '三', '四', '五', '六'][value];\n    }\n\n    if (result.length > 0 && value < 10) {\n      value = '0' + value;\n    }\n\n    return value || 0;\n  });\n  return time_str;\n}\n/**\n * @param {number} time\n * @param {string} option\n * @returns {string}\n */\n\n\nfunction formatTime(time, option) {\n  if (('' + time).length === 10) {\n    time = parseInt(time) * 1000;\n  } else {\n    time = +time;\n  }\n\n  var d = new Date(time);\n  var now = Date.now();\n  var diff = (now - d) / 1000;\n\n  if (diff < 30) {\n    return '刚刚';\n  } else if (diff < 3600) {\n    // less 1 hour\n    return Math.ceil(diff / 60) + '分钟前';\n  } else if (diff < 3600 * 24) {\n    return Math.ceil(diff / 3600) + '小时前';\n  } else if (diff < 3600 * 24 * 2) {\n    return '1天前';\n  }\n\n  if (option) {\n    return parseTime(time, option);\n  } else {\n    return d.getMonth() + 1 + '月' + d.getDate() + '日' + d.getHours() + '时' + d.getMinutes() + '分';\n  }\n}\n/**\n * @param {string} url\n * @returns {Object}\n */\n\n\nfunction param2Obj(url) {\n  var search = url.split('?')[1];\n\n  if (!search) {\n    return {};\n  }\n\n  return JSON.parse('{\"' + decodeURIComponent(search).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"').replace(/\\+/g, ' ') + '\"}');\n}\n/**\n * 转换空的查询参数\n */\n\n\nvar filterQueryParams = function filterQueryParams(params) {\n  return _vue.default._.mapValues(params, function (v) {\n    return v || undefined;\n  });\n};\n/**\n * 将树形结构数据转为list结构\n */\n\n\nexports.filterQueryParams = filterQueryParams;\n\nvar transformTreeToList = function transformTreeToList(treedata) {\n  var data = [];\n\n  var handleTreeSource = function handleTreeSource(treedata) {\n    _vue.default._.forEach(treedata, function (value, key) {\n      data.push(value);\n\n      if (!_vue.default._.isEmpty(value.children)) {\n        handleTreeSource(value.children);\n      }\n    });\n  };\n\n  handleTreeSource(treedata);\n  return data;\n};\n/**\n * 转换为select options\n */\n\n\nexports.transformTreeToList = transformTreeToList;\n\nvar transformToOptions = function transformToOptions(listdata) {\n  var data = [];\n\n  _vue.default._.forEach(listdata, function (val, key) {\n    data.push({\n      label: val.name,\n      value: val.id\n    });\n  });\n\n  return data;\n};\n/**\n * 时间转换\n */\n\n\nexports.transformToOptions = transformToOptions;\n\nfunction fattCreateTime(time, str) {\n  if (str === 'd') {\n    return (0, _moment.default)(time).format('YYYY-MM-DD');\n  } else {\n    return (0, _moment.default)(time).format('YYYY-MM-DD HH:mm:ss');\n  }\n}\n/**\n * addClass\n */\n\n\nfunction addClass(el, className) {\n  el.classList.add(className);\n}\n/**\n * removeClass\n */\n\n\nfunction removeClass(el, className) {\n  el.classList.remove(className);\n}\n/**\n * toBoolean\n */\n\n\nvar toBoolean = function toBoolean(v) {\n  return Boolean(parseInt(v));\n};\n/* 从数组1的值（name+id）去除那么的合集数组 */\n\n\nexports.toBoolean = toBoolean;\n\nfunction getArrayIdList(arr1) {\n  var arr = [];\n\n  var _iterator = _createForOfIteratorHelper(arr1),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var a = _step.value;\n      arr.push(a.id);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return arr;\n}\n/* 获取一个当前日期的前七天的数组 */\n\n\nfunction getSevenDayArray() {\n  var myDate = new Date();\n  myDate.setDate(myDate.getDate() - 6);\n  var dateArray = [];\n  var flag = 1;\n  var dateTemp; // const  weekday =[\"周日\",\"周一\",\"周二\",\"周三\",\"周四\",\"周五\",\"周六\"]\n\n  for (var i = 0; i < 7; i++) {\n    dateTemp = myDate.getFullYear() + '-' + (myDate.getMonth() + 1) + '-' + myDate.getDate(); // + '(' + weekday[myDate.getDay()] + ')'\n\n    dateArray.push(dateTemp);\n    myDate.setDate(myDate.getDate() + flag);\n  }\n\n  return dateArray;\n}\n\nfunction debounce(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n\n  var later = function later() {\n    // 据上一次触发时间间隔\n    var last = +new Date() - timestamp; // 上次被包装函数被调用时间间隔last小于设定时间间隔wait\n\n    if (last < wait && last > 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null; // 如果设定为immediate===true，因为开始边界已经调用过了此处无需调用\n\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    context = this;\n    timestamp = +new Date();\n    var callNow = immediate && !timeout; // 如果延时不存在，重新设定延时\n\n    if (!timeout) timeout = setTimeout(later, wait);\n\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n}\n/* 去除文本域字符串的空行*/\n\n\nfunction replaceBlank(str) {\n  var reg = /\\n(\\n)*( )*(\\n)*\\n/g;\n  return str.replace(reg, '\\n');\n}\n/**\n * 数字小于10前补0\n * num 为 整数\n */\n\n\nfunction fromatNum(num) {\n  return num > 9 ? num : '0' + num;\n}\n\nfunction resultAlert(res, nextFun) {\n  var msg = {\n    text: '',\n    status: false\n  };\n  var list = res.length ? res : res.data;\n\n  _vue.default._.forEach(list, function (item) {\n    if (item.status) {\n      msg.text += \"<i class=\\\"el-icon-success\\\" style=\\\"color:#67c23a\\\"></i>\";\n      msg.status = true;\n    } else {\n      msg.text += \"<i class=\\\"el-icon-error\\\" style=\\\"color:#f56c6c\\\"></i>\";\n    }\n\n    msg.text += \"<span style=\\\"padding-left:10px\\\">\".concat(item.message, \"</span><br/>\");\n  });\n\n  _elementUi.MessageBox.alert(msg.text, '执行结果', {\n    confirmButtonText: '确定',\n    dangerouslyUseHTMLString: true,\n    callback: function callback(action) {\n      if (nextFun) {\n        nextFun(msg.status);\n      }\n\n      document.body.classList.remove('el-popup-parent--hidden');\n    }\n  });\n}",null]}